"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const cli_highlight_1 = require("cli-highlight");
exports.TurboContext = react_1.default.createContext(null);
function useTurbo() {
    return react_1.default.useContext(exports.TurboContext);
}
exports.useTurbo = useTurbo;
exports.ClientContext = react_1.default.createContext(null);
function useClient() {
    return react_1.default.useContext(exports.ClientContext);
}
exports.useClient = useClient;
function useClientState() {
    const client = useClient();
    const [state, setState] = react_1.default.useState(null);
    react_1.default.useEffect(() => {
        const cb = (state) => {
            setState(state);
        };
        client.on("sync", cb);
        return () => client.off("sync", cb);
    }, [client]);
    return state;
}
exports.useClientState = useClientState;
function getScript(state, id) {
    return state ? state.target.scripts.find(s => s.id === id) : undefined;
}
exports.getScript = getScript;
function useScriptSource(id) {
    const client = useClient();
    const state = useClientState();
    const [script, setScript] = react_1.default.useState("");
    react_1.default.useEffect(() => {
        if (!id) {
            setScript("");
        }
        else if (!state) {
            setScript("");
        }
        else if (state.target.paused) {
            client.getScriptSource(id).then(({ value }) => {
                setScript(value);
            });
        }
        else {
            setScript("");
        }
    }, [state]);
    return script;
}
exports.useScriptSource = useScriptSource;
function useFocusedCallFrame() {
    const state = useClientState();
    if (state && state.target.paused) {
        return state.target.callFrames[state.target.focusedCallFrame];
    }
    else {
        return undefined;
    }
}
exports.useFocusedCallFrame = useFocusedCallFrame;
function useObjectProperties(objectId) {
    const client = useClient();
    const [loaded, setLoaded] = react_1.default.useState(false);
    const [props, setProps] = react_1.default.useState(null);
    const [error, setError] = react_1.default.useState(null);
    react_1.default.useEffect(() => {
        client.getProperties(objectId).then(resp => {
            setLoaded(true);
            if (resp.error) {
                setProps(null);
                setError(resp.value);
            }
            else {
                setProps(resp.value);
                setError(null);
            }
        });
    }, [objectId]);
    return [loaded, props, error];
}
exports.useObjectProperties = useObjectProperties;
function highlightJs(str) {
    return cli_highlight_1.highlight(str, { language: "javascript" });
}
exports.highlightJs = highlightJs;
//# sourceMappingURL=helpers.js.map