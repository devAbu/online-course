"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const renderer_1 = require("../renderer");
const helpers_1 = require("./helpers");
function js(str) {
    return react_1.default.createElement(renderer_1.Box, null, helpers_1.highlightJs(str));
}
function formatString(str) {
    const lines = str.split("\n");
    return (react_1.default.createElement(renderer_1.Box, { direction: "column" }, lines.map((l, i) => (react_1.default.createElement(renderer_1.Box, { key: i },
        i === 0 ? '"' : "",
        l,
        i === lines.length - 1 ? '"' : "")))));
}
function ObjectProperty(props) {
    const prop = props.prop;
    return (react_1.default.createElement(renderer_1.Box, null,
        prop.name,
        ": ",
        react_1.default.createElement(ObjectView, { value: prop.value })));
}
function ErrorStringOrException(props) {
    const { value } = props;
    if (typeof value === "string") {
        return react_1.default.createElement(renderer_1.Box, null, value);
    }
    else if (!value.exception) {
        return react_1.default.createElement(renderer_1.Box, null, value.text);
    }
    else {
        return react_1.default.createElement(ObjectView, { value: value.exception });
    }
}
const MAX_PROPS_TO_SHOW_WHEN_CLOSED = 5;
function ObjectTree(props) {
    const value = props.value;
    const [open, setOpen] = react_1.default.useState(false);
    function toggleOpen() {
        setOpen(!open);
    }
    if (value.type === "object") {
        const [loaded, properties, error] = helpers_1.useObjectProperties(value.objectId);
        if (!loaded) {
            return react_1.default.createElement(renderer_1.Box, null, "Loading...");
        }
        if (error) {
            return react_1.default.createElement(ErrorStringOrException, { value: error });
        }
        else if (properties) {
            const toShow = properties.filter(p => p.name !== "__proto__");
            const showArrow = toShow.length > MAX_PROPS_TO_SHOW_WHEN_CLOSED;
            if (toShow.length === 0) {
                return react_1.default.createElement(renderer_1.Box, null, "{}");
            }
            else {
                const firstProps = toShow.slice(0, MAX_PROPS_TO_SHOW_WHEN_CLOSED);
                const restProps = toShow.slice(MAX_PROPS_TO_SHOW_WHEN_CLOSED);
                return (react_1.default.createElement(renderer_1.Box, { direction: "column" },
                    react_1.default.createElement(renderer_1.Box, { onClick: toggleOpen }, firstProps.map((p, i) => (react_1.default.createElement(renderer_1.Box, { key: i },
                        i === 0 && showArrow && !open ? "► " : "",
                        i === 0 && showArrow && open ? "▼ " : "",
                        i === 0 ? "{ " : "  ",
                        react_1.default.createElement(ObjectProperty, { prop: p }),
                        i === firstProps.length - 1
                            ? showArrow
                                ? open
                                    ? ""
                                    : " …}"
                                : " }"
                            : "")))),
                    showArrow && open ? (react_1.default.createElement(renderer_1.Box, { direction: "column", marginLeft: 4 }, restProps.map((p, i) => (react_1.default.createElement(renderer_1.Box, { key: i },
                        react_1.default.createElement(ObjectProperty, { prop: p }),
                        i === restProps.length - 1 ? " }" : ""))))) : null));
            }
        }
    }
    return react_1.default.createElement(renderer_1.Box, null);
}
function ComplexObject(props) {
    const { simpleExceptions, value } = props;
    if (value.type !== "object") {
        return react_1.default.createElement(renderer_1.Box, null,
            "unknown type $",
            value["type"]);
    }
    if (value.subtype === "error") {
        const text = simpleExceptions
            ? value.description.split("\n")[0]
            : value.description;
        return react_1.default.createElement(renderer_1.Box, { color: "red" }, text);
    }
    else if (value.subtype === "null") {
        return js("null");
    }
    else if (typeof value.subtype !== "undefined" &&
        value.subtype.length > 0) {
        return react_1.default.createElement(renderer_1.Box, null, `[${value.className} ${value.type}]`);
    }
    else {
        return react_1.default.createElement(ObjectTree, { value: value });
    }
}
function FunctionObject(props) {
    const { value } = props;
    if (value.type !== "function") {
        return react_1.default.createElement(renderer_1.Box, null,
            "unknown type $",
            value["type"]);
    }
    const text = value.description;
    const highlighted = react_1.default.useMemo(() => helpers_1.highlightJs(text), [text]);
    return react_1.default.createElement(renderer_1.Box, { direction: "column" }, highlighted.split("\n"));
}
function ObjectView(props) {
    const { simpleExceptions, value } = props;
    if (value.type === "string")
        return formatString(value.value);
    if (value.type === "number")
        return js(value.description);
    if (value.type === "boolean")
        return js(String(value.value));
    if (value.type === "symbol")
        return js(value.description);
    if (value.type === "bigint")
        return js(value.description);
    if (value.type === "undefined")
        return js("undefined");
    if (value.type === "function")
        return react_1.default.createElement(FunctionObject, { value: value });
    if (value.type === "object")
        return (react_1.default.createElement(ComplexObject, { simpleExceptions: simpleExceptions || false, value: value }));
    return react_1.default.createElement(renderer_1.Box, null,
        "unknown type $",
        value["type"]);
}
exports.ObjectView = ObjectView;
//# sourceMappingURL=object.js.map