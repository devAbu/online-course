"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = __importDefault(require("react"));
const buffertarget_1 = require("./buffertarget");
const renderer_1 = require("./renderer");
function useBufferTarget() {
    return react_1.default.useContext(buffertarget_1.BufferTargetContext);
}
exports.useBufferTarget = useBufferTarget;
function useTerminalSize() {
    const target = useBufferTarget();
    const [width, setWidth] = react_1.default.useState(0);
    const [height, setHeight] = react_1.default.useState(0);
    react_1.default.useEffect(() => {
        setWidth(target.width);
        setHeight(target.height || 0);
    }, [target.width, target.height]);
    return { width, height };
}
exports.useTerminalSize = useTerminalSize;
function useInput(cb) {
    const target = useBufferTarget();
    react_1.default.useEffect(() => {
        const handler = (event) => {
            renderer_1.unstable_batchedUpdates(() => {
                cb(event);
            });
        };
        target.on("input", handler);
        return () => target.off("input", handler);
    });
}
exports.useInput = useInput;
function useMouse(cb) {
    const target = useBufferTarget();
    react_1.default.useEffect(() => {
        const handler = (event) => {
            renderer_1.unstable_batchedUpdates(() => {
                cb(event);
            });
        };
        target.on("mouse", handler);
        return () => target.off("mouse", handler);
    });
}
exports.useMouse = useMouse;
function useInterval(callback, delay) {
    const savedCallback = react_1.default.useRef();
    react_1.default.useEffect(() => {
        savedCallback.current = callback;
    }, [callback]);
    react_1.default.useEffect(() => {
        const handler = () => renderer_1.unstable_batchedUpdates(() => {
            savedCallback.current && savedCallback.current();
        });
        const id = setInterval(handler, delay);
        return () => clearInterval(id);
    }, [delay]);
}
exports.useInterval = useInterval;
//# sourceMappingURL=hooks.js.map