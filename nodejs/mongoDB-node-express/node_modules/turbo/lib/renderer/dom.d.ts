import * as yoga from "yoga-layout-prebuilt";
import { BufferTarget, MouseEvent } from "./buffertarget";
import { Span } from "./ansi";
export interface Container {
    drawing: boolean;
    target: BufferTarget;
    node: ComplexNode;
    forceRedraw: boolean;
}
declare type Attributes = {
    [key: string]: any;
};
export interface ComplexNode {
    type: "complex";
    name: string;
    yoga: yoga.YogaNode;
    children: Node[];
    parent: ComplexNode | null;
    attributes: Attributes;
    color?: string | number;
    bg?: string | number;
    drawOffsetTop?: number;
    drawOffsetLeft?: number;
    drawOverflow: boolean;
    wrap: boolean;
    onClick?(event: MouseEvent): void;
    onMouse?(event: MouseEvent): void;
}
export interface TextNodePart {
    span: Span;
    yoga: yoga.YogaNode;
}
export interface TextNode {
    type: "text";
    yoga: yoga.YogaNode;
    value: string;
    parts: TextNodePart[];
    parent: ComplexNode | null;
}
export declare type Node = ComplexNode | TextNode;
export declare function findClosestParent<M extends (n: ComplexNode) => boolean>(node: Node, matcher: M): ComplexNode | undefined;
export declare function resolveProperty<G extends (n: ComplexNode) => any>(node: Node, getter: G): ReturnType<G> | undefined;
export declare function forAllComplexChildren(node: ComplexNode, cb: (node: ComplexNode, x: number, y: number) => void, x?: number, y?: number): void;
export declare function forAllTextChildren(node: ComplexNode, cb: (node: TextNode) => void): void;
export declare function cloneNode(node: Node): Node;
export declare function createNode(name: string): ComplexNode;
export declare function createContainer(target: BufferTarget): Container;
export declare function calculateTextHeight(node: Node, width: number): number;
export declare function updateTextNodeLayout(node: TextNode): void;
export declare function createTextNode(text: string): TextNode;
export declare function removeChildNode(node: ComplexNode, child: Node): void;
export declare function appendChildNode(node: ComplexNode, child: Node): void;
export declare function insertBeforeNode(node: ComplexNode, child: Node, before: Node): void;
export declare function applyAttributes(node: ComplexNode, attributes: Attributes): void;
export declare function getNodesContainingPosition(node: ComplexNode, positionX: number, positionY: number): ComplexNode[];
export {};
