"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@turbo/core");
const net_1 = require("@turbo/net");
const react_1 = __importDefault(require("react"));
const renderer_1 = require("../renderer");
const log_1 = require("../components/log");
const repl_1 = require("../components/repl");
const code_1 = require("../components/code");
const helpers_1 = require("../components/helpers");
const breakpoints_1 = require("../components/breakpoints");
const stack_1 = require("../components/stack");
const components = {
    log: { type: "standard", value: log_1.log.bind(null, "target") },
    debug: { type: "standard", value: log_1.log.bind(null, "turbo") },
    repl: { type: "react", value: repl_1.Repl },
    code: { type: "react", value: code_1.Code },
    breakpoints: { type: "react", value: breakpoints_1.Breakpoints },
    stack: { type: "react", value: stack_1.Stack },
};
function App(props) {
    return (react_1.default.createElement(helpers_1.TurboContext.Provider, { value: props.turbo },
        react_1.default.createElement(helpers_1.ClientContext.Provider, { value: props.client }, props.children)));
}
function component(turbo, name) {
    const sessionId = core_1.getCurrentSessionId(turbo);
    const Component = components[name];
    if (!Component) {
        console.error(`unknown component: ${name}`);
        return;
    }
    if (!sessionId) {
        console.error("unable to identify current session");
        return;
    }
    const client = new net_1.Client(turbo, { type: "managed", sessionId });
    client.on("ready", () => {
        if (Component.type === "react") {
            renderer_1.render(react_1.default.createElement(App, { turbo: turbo, client: client },
                react_1.default.createElement(Component.value, null)));
        }
        else {
            Component.value(client);
        }
    });
    client.on("quit", () => {
        process.exit(0);
    });
    client.connectAfterDelay();
}
exports.component = component;
//# sourceMappingURL=component.js.map