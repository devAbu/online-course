"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@turbo/core");
const net_1 = require("@turbo/net");
function debounce(func, wait) {
    let timeout;
    return function (...args) {
        const later = () => {
            timeout = undefined;
            func(...args);
        };
        if (timeout)
            clearTimeout(timeout);
        timeout = setTimeout(later, wait);
    };
}
async function daemon(turbo) {
    const sessionId = core_1.getCurrentSessionId(turbo);
    if (!sessionId) {
        console.error("unable to identify current session");
        return;
    }
    const turboLog = await net_1.SocketLogServer.create(turbo);
    const targetLog = await net_1.SocketLogServer.create(turbo);
    core_1.logger.on("log", log => {
        const msg = core_1.format(log);
        process.stdout.write(msg);
        turboLog.log(msg);
    });
    const target = core_1.createTarget(turbo);
    target.on("stdout", log => targetLog.log(log));
    target.on("stderr", log => targetLog.log(log));
    process.on("exit", () => target.stop());
    const server = new net_1.SocketServer(turbo, sessionId);
    server.on("log", (log) => {
        const msg = core_1.format(log);
        process.stdout.write(msg);
        turboLog.log(msg);
    });
    const store = core_1.makeStore(turbo, server, target, {
        target: {
            connected: false,
            paused: false,
            callFrames: undefined,
            scripts: [],
            breakpoints: [],
            breakpointsEnabled: false,
            focusedCallFrame: 0,
        },
        logStream: {
            turboSocket: turboLog.socketPath,
            targetSocket: targetLog.socketPath,
        },
    });
    let lastState = store.getState();
    store.subscribe(debounce(() => {
        const state = store.getState();
        if (lastState !== state) {
            lastState = state;
            server.broadcastState(state);
        }
    }, 10));
    process.on("SIGHUP", () => process.exit(0));
    process.on("SIGINT", () => process.exit(0));
}
exports.daemon = daemon;
//# sourceMappingURL=daemon.js.map