"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const TEST_ENV = {
    getVar: (name) => {
        if (name === "SHELL")
            return "conch";
        if (name === "TMUX")
            return "foobarbaz";
        else
            return undefined;
    },
    getTmpFolder(context) {
        if (context === "sessions")
            return "/tmp/turbo/sessions";
        throw new Error(context);
    },
    getTmpFile(context, name) {
        if (context === "sessions" && name === "id")
            return "/tmp/turbo/sessions/id";
        throw new Error(`${context}, ${name}`);
    },
    execSync: jest.fn().mockReturnValueOnce("sessionid"),
    getAllSessionIds() {
        return ["id"];
    },
    nodePath: "/tmp/node",
    scriptPath: "/tmp/turbo.js",
    cleanPath: jest.fn(),
    require: jest.fn(),
    readFile: jest.fn(),
    exit: jest.fn(),
};
const TEST_CONFIG = {
    target: "node",
    shell: "tmux",
};
exports.TEST_TURBO = {
    env: TEST_ENV,
    config: TEST_CONFIG,
    options: {},
};
//# sourceMappingURL=mocks.js.map