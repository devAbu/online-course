"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const client_1 = require("./client");
const mocksocket_1 = require("./mocksocket");
const mocks_1 = require("./mocks");
function exampleSyncMessage() {
    return {
        type: "sync",
        payload: {
            state: {
                target: {
                    connected: false,
                    paused: false,
                    callFrames: undefined,
                    scripts: [],
                    breakpoints: [],
                    breakpointsEnabled: false,
                    focusedCallFrame: 0,
                },
                logStream: {
                    turboSocket: "",
                    targetSocket: "",
                },
            },
        },
    };
}
describe("Client", () => {
    test("handles the sync event", () => {
        const socket = mocksocket_1.mockSocket();
        const client = new client_1.Client(mocks_1.TEST_TURBO, {
            type: "unmanaged",
            sessionId: "id",
            socket,
            connected: true,
        });
        const listener = jest.fn();
        client.on("sync", listener);
        const callbacks = socket.on.mock.calls.filter(([name]) => name === "data");
        expect(callbacks.length).toBe(1);
        const [_, callback] = callbacks[0];
        const msg = exampleSyncMessage();
        callback(msg);
        expect(listener.mock.calls).toEqual([[msg.payload.state]]);
    });
});
//# sourceMappingURL=client.spec.js.map