import { State, Action, CallFrameId, ScriptId, Turbo, ObjectId, ResponsePayload, AnyMessage, AnyRequest, Response, RequestType, ClientEvents } from "@turbo/core";
import { BaseClient, ClientOptions } from "./baseclient";
export declare class Client extends BaseClient<ClientEvents> {
    private lastState;
    private bufferLogs;
    private logBuffer;
    constructor(turbo: Turbo, options: ClientOptions);
    get state(): State | null;
    dispatch(action: Action): void;
    quit(): void;
    eval(value: string, id: CallFrameId): Promise<ResponsePayload<"eval">>;
    getProperties(objectId: ObjectId): Promise<ResponsePayload<"getProperties">>;
    getScriptSource(scriptId: ScriptId): Promise<ResponsePayload<"getScriptSource">>;
    protected handleUnhandledMessage(msg: AnyMessage): void;
    protected handleUnhandledRequest(req: AnyRequest): Promise<Response<RequestType>["payload"] | undefined>;
    private flushLogs;
    private sendLog;
}
