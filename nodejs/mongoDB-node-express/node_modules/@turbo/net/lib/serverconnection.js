"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const core_1 = require("@turbo/core");
const baseclient_1 = require("./baseclient");
class SocketServerConnection extends baseclient_1.BaseClient {
    constructor(turbo, id, sessionId, socket) {
        super(turbo, {
            type: "unmanaged",
            sessionId,
            socket,
            connected: true,
            reconnect: false,
        });
        this.id = id;
    }
    sendState(state) {
        this.sendMessage({
            type: "sync",
            payload: {
                state,
            },
        });
    }
    sendQuit() {
        this.sendMessage({
            type: "quit",
            payload: undefined,
        });
    }
    handleUnhandledMessage(msg) {
        if (core_1.isMessageType("action", msg)) {
            this.fire("action", msg.payload);
        }
        else if (core_1.isMessageType("log", msg)) {
            this.fire("log", msg.payload);
        }
        else if (core_1.isMessageType("quit", msg)) {
            this.fire("quit", undefined);
        }
        else {
            core_1.logger.error(`unhandled message with type ${msg.type}`);
        }
    }
    handleUnhandledRequest(request) {
        if (core_1.isServerRequestType(request)) {
            return new Promise(resolve => this.fire("request", { request, respond: resolve }));
        }
        else {
            core_1.logger.error(`unhandled request with type ${request.type}`);
            return Promise.resolve(undefined);
        }
    }
}
exports.SocketServerConnection = SocketServerConnection;
//# sourceMappingURL=serverconnection.js.map