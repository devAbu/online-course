"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
jest.mock("ffi-napi");
jest.mock("ref-napi");
jest.mock("ref-array-di");
const index_1 = require("./index");
function createConfig() {
    return {
        target: "node",
        shell: "tmux",
    };
}
function createEnv(inTmux = false) {
    return {
        getVar: (name) => {
            if (name === "SHELL")
                return "conch";
            if (name === "TMUX" && inTmux)
                return "session";
            else
                return undefined;
        },
        getTmpFolder() {
            return "";
        },
        getTmpFile() {
            return "";
        },
        getAllSessionIds() {
            if (inTmux) {
                return ["session"];
            }
            else {
                return [];
            }
        },
        execSync: jest.fn().mockReturnValueOnce("sessionid"),
        nodePath: "/tmp/node",
        scriptPath: "/tmp/turbo.js",
        cleanPath: jest.fn(),
        require: jest.fn(),
        readFile: jest.fn(),
        exit: jest.fn(),
    };
}
function createTurbo(env, config) {
    return { env, config, options: {} };
}
const POST_CMDS = [";", "select-window", "-t:0", ";", "attach"];
test("generateTmuxStartCommand creates a command for a single pane", () => {
    const id = "id";
    const layout = {
        windows: [
            {
                name: "test",
                panes: [{ type: "exec", command: "command" }],
            },
        ],
    };
    const turbo = createTurbo(createEnv(), createConfig());
    expect(index_1.generateTmuxStartCommand(id, layout, turbo)).toEqual({
        command: "tmux",
        args: [
            "new-session",
            "-d",
            "-n",
            "id:test",
            "-s",
            id,
            "command",
            ...POST_CMDS,
        ],
    });
});
test("generateTmuxStartCommand creates a command for multiple panes", () => {
    const id = "id";
    const layout = {
        windows: [
            {
                name: "test2",
                panes: [
                    { type: "exec", command: "command" },
                    { type: "component", component: "foobar" },
                    { type: "shell" },
                ],
            },
        ],
    };
    const turbo = createTurbo(createEnv(), createConfig());
    expect(index_1.generateTmuxStartCommand(id, layout, turbo)).toEqual({
        command: "tmux",
        args: [
            "new-session",
            "-d",
            "-n",
            "id:test2",
            "-s",
            id,
            "command",
            ";",
            "split-window",
            "/tmp/node /tmp/turbo.js --session id component foobar",
            ";",
            "split-window",
            "conch",
            ...POST_CMDS,
        ],
    });
});
test("generateTmuxStartCommand creates a command for multiple windows", () => {
    const id = "id";
    const layout = {
        windows: [
            {
                name: "test3",
                panes: [
                    { type: "exec", command: "command" },
                    { type: "component", component: "foobar" },
                    { type: "shell" },
                ],
            },
            {
                name: "test4",
                panes: [
                    { type: "exec", command: "echo 'foo'" },
                    { type: "shell" },
                ],
            },
        ],
    };
    const turbo = createTurbo(createEnv(), createConfig());
    expect(index_1.generateTmuxStartCommand(id, layout, turbo)).toEqual({
        command: "tmux",
        args: [
            "new-session",
            "-d",
            "-n",
            "id:test3",
            "-s",
            id,
            "command",
            ";",
            "split-window",
            "/tmp/node /tmp/turbo.js --session id component foobar",
            ";",
            "split-window",
            "conch",
            ";",
            "new-window",
            "-a",
            "-n",
            "id:test4",
            "echo 'foo'",
            ";",
            "split-window",
            "conch",
            ...POST_CMDS,
        ],
    });
});
//# sourceMappingURL=index.spec.js.map