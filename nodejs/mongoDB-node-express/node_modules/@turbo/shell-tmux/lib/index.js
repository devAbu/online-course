"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
function getNodeCommand(env, args, inspect = false) {
    return `${env.nodePath}${inspect ? "--inspect-brk " : " "}${env.scriptPath} ${args.join(" ")}`;
}
function generatePaneCommand(id, pane, env) {
    if (pane.type === "component") {
        return [
            `${getNodeCommand(env, [
                "--session",
                id,
                "component",
                pane.component,
            ])}`,
        ];
    }
    else if (pane.type === "exec") {
        return [pane.command];
    }
    else if (pane.type === "shell") {
        const shell = env.getVar("SHELL") || "sh";
        return [shell];
    }
    else {
        return [];
    }
}
function generatePaneCommands(id, panes, env) {
    const commands = [];
    for (const pane of panes) {
        const command = generatePaneCommand(id, pane, env);
        const paneCommand = [";", "split-window", ...command];
        commands.push(paneCommand);
    }
    return commands;
}
function generateWindowCommands(id, window, env, first, tmux) {
    let commands = [];
    const firstPane = window.panes[0];
    const firstCommand = generatePaneCommand(id, firstPane, env);
    const paneCommands = generatePaneCommands(id, window.panes.slice(1), env);
    if (first && !tmux) {
        commands = [
            "new-session",
            "-d",
            "-n",
            makeWindowName(id, window.name),
            "-s",
            id,
            ...firstCommand,
        ].concat(paneCommands.flat());
    }
    else {
        commands = [
            ...(first ? [] : [";"]),
            "new-window",
            "-a",
            "-n",
            makeWindowName(id, window.name),
            ...firstCommand,
        ].concat(paneCommands.flat());
    }
    return commands;
}
function makeWindowName(id, name) {
    return `${id}:${name}`;
}
function generateSessionArgs(id, layout, turbo) {
    const tmux = inTmux(turbo.env);
    const footer = tmux
        ? Array(layout.windows.length - 1)
            .fill([";", "previous-window"])
            .flat()
        : [";", "select-window", "-t:0", ";", "attach"];
    return layout.windows
        .map((w, i) => generateWindowCommands(id, w, turbo.env, i === 0, tmux))
        .flat()
        .concat(footer);
}
function generateTmuxStartCommand(id, layout, turbo) {
    return {
        command: "tmux",
        args: generateSessionArgs(id, layout, turbo),
    };
}
exports.generateTmuxStartCommand = generateTmuxStartCommand;
function inTmux(env) {
    return Boolean(env.getVar("TMUX"));
}
function getFfi() {
    const ffi = require("ffi-napi");
    const ref = require("ref-napi");
    const ArrayTypeConstructor = require("ref-array-di");
    const ArrayType = ArrayTypeConstructor(ref);
    const stringArray = ArrayType(ref.types.CString);
    return { ffi, ref, stringArray };
}
function getFd(v) {
    return v._handle.fd;
}
function execvp(command, args) {
    if (args.length === 0) {
        throw new Error("invalid args to execvp");
    }
    const { ffi, ref, stringArray } = getFfi();
    const current = ffi.Library(null, {
        execvp: ["int", ["string", stringArray]],
        dup2: ["int", ["int", "int"]],
    });
    current.dup2(getFd(process.stdin), 0);
    current.dup2(getFd(process.stdout), 1);
    current.dup2(getFd(process.stderr), 2);
    return current.execvp(command, [
        command,
        ...args.slice(),
        ref.NULL,
    ]);
}
function tmux(options, turbo) {
    return {
        start(id, layout, turbo) {
            const { command, args } = generateTmuxStartCommand(id, layout, turbo);
            execvp(command, args);
        },
        getSessionId() {
            const ids = turbo.env.getAllSessionIds();
            if (inTmux(turbo.env)) {
                const tmuxId = turbo.env
                    .execSync("tmux display-message -p '#S'")
                    .toString()
                    .split("\n")[0];
                if (ids.includes(tmuxId)) {
                    return tmuxId;
                }
            }
            return undefined;
        },
    };
}
exports.default = tmux;
//# sourceMappingURL=index.js.map