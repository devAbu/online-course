"use strict";
function __export(m) {
    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
}
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const v4_1 = __importDefault(require("uuid/v4"));
exports.LOGO = "   __             __        \n" +
    "  / /___  _______/ /_  ____ \n" +
    " / __/ / / / ___/ __ \\/ __ \\\n" +
    "/ /_/ /_/ / /  / /_/ / /_/ /\n" +
    "\\__/\\__,_/_/  /_.___/\\____/\n ";
function uuid() {
    return v4_1.default();
}
exports.uuid = uuid;
function getCurrentSessionId(turbo) {
    if (turbo.options.sessionId) {
        return turbo.options.sessionId;
    }
    const shell = createShell(turbo);
    const shellId = shell.getSessionId();
    if (shellId) {
        return shellId;
    }
    const ids = turbo.env.getAllSessionIds();
    if (ids.length === 1) {
        return ids[0];
    }
    return undefined;
}
exports.getCurrentSessionId = getCurrentSessionId;
exports.DEFAULT_SESSION_ID = "turbo";
function generateSessionId(turbo) {
    const sessionIds = turbo.env.getAllSessionIds();
    const standardIds = sessionIds.filter(id => /^turbo(-.+)?$/.test(id));
    if (!standardIds.includes(exports.DEFAULT_SESSION_ID)) {
        return exports.DEFAULT_SESSION_ID;
    }
    else {
        const id = standardIds.length + 1;
        return `${exports.DEFAULT_SESSION_ID}-${id}`;
    }
}
exports.generateSessionId = generateSessionId;
function resolvePlugin(turbo, type, name) {
    const shorthand = `${type}-${name}`;
    let mod = turbo.env.require(shorthand);
    if (mod)
        return mod.default;
    mod = turbo.env.require(name);
    if (mod)
        return mod.default;
    throw new Error(`unable to resolve plugin ${type}-${name}`);
}
exports.resolvePlugin = resolvePlugin;
function createTarget(turbo) {
    const config = turbo.config.target;
    const name = Array.isArray(config) ? config[0] : config;
    const options = Array.isArray(config) ? config[1] : {};
    const connector = resolvePlugin(turbo, "connector", name);
    return connector(options, turbo);
}
exports.createTarget = createTarget;
function createShell(turbo) {
    const config = turbo.config.shell;
    const name = Array.isArray(config) ? config[0] : config;
    const options = Array.isArray(config) ? config[1] : {};
    const shell = resolvePlugin(turbo, "shell", name);
    return shell(options, turbo);
}
exports.createShell = createShell;
var emitter_1 = require("./emitter");
exports.EmitterBase = emitter_1.EmitterBase;
var logger_1 = require("./logger");
exports.logger = logger_1.logger;
exports.format = logger_1.format;
var normalize_1 = require("./normalize");
exports.canonicalizeUrl = normalize_1.canonicalizeUrl;
var reducer_1 = require("./reducer");
exports.makeStore = reducer_1.makeStore;
__export(require("./net"));
//# sourceMappingURL=index.js.map