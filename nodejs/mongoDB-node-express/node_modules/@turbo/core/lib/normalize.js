"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const CASE_INSENSITIVE_PATHS = false;
function canonicalizeUrl(urlOrPath) {
    if (urlOrPath == null) {
        return urlOrPath;
    }
    urlOrPath = fileUrlToPath(urlOrPath);
    if (urlOrPath.indexOf("?") >= 0) {
        urlOrPath = urlOrPath.split("?")[0];
    }
    urlOrPath = stripTrailingSlash(urlOrPath);
    urlOrPath = fixDriveLetterAndSlashes(urlOrPath);
    if (!CASE_INSENSITIVE_PATHS) {
        urlOrPath = normalizeIfFSIsCaseInsensitive(urlOrPath);
    }
    return urlOrPath;
}
exports.canonicalizeUrl = canonicalizeUrl;
function normalizeIfFSIsCaseInsensitive(urlOrPath) {
    return isWindowsFilePath(urlOrPath) ? urlOrPath.toLowerCase() : urlOrPath;
}
function isWindowsFilePath(candidate) {
    return !!candidate.match(/[A-z]:[\\\/][^\\\/]/);
}
function isFileUrl(candidate) {
    return candidate.startsWith("file:///");
}
exports.isFileUrl = isFileUrl;
function fileUrlToPath(urlOrPath) {
    if (isFileUrl(urlOrPath)) {
        urlOrPath = urlOrPath.replace("file:///", "");
        urlOrPath = decodeURIComponent(urlOrPath);
        if (urlOrPath[0] !== "/" && !urlOrPath.match(/^[A-Za-z]:/)) {
            urlOrPath = "/" + urlOrPath;
        }
        urlOrPath = fixDriveLetterAndSlashes(urlOrPath);
    }
    return urlOrPath;
}
exports.fileUrlToPath = fileUrlToPath;
function fileUrlToNetworkPath(urlOrPath) {
    if (isFileUrl(urlOrPath)) {
        urlOrPath = urlOrPath.replace("file:///", "\\\\");
        urlOrPath = urlOrPath.replace(/\//g, "\\");
        urlOrPath = urlOrPath = decodeURIComponent(urlOrPath);
    }
    return urlOrPath;
}
exports.fileUrlToNetworkPath = fileUrlToNetworkPath;
function forceForwardSlashes(aUrl) {
    return aUrl
        .replace(/\\\//g, "/")
        .replace(/\\/g, "/");
}
exports.forceForwardSlashes = forceForwardSlashes;
function fixDriveLetterAndSlashes(aPath, uppercaseDriveLetter = false) {
    if (!aPath)
        return aPath;
    aPath = fixDriveLetter(aPath, uppercaseDriveLetter);
    if (aPath.match(/file:\/\/\/[A-Za-z]:/)) {
        const prefixLen = "file:///".length;
        aPath =
            aPath.substr(0, prefixLen + 1) +
                aPath.substr(prefixLen + 1).replace(/\//g, "\\");
    }
    else if (aPath.match(/^[A-Za-z]:/)) {
        aPath = aPath.replace(/\//g, "\\");
    }
    return aPath;
}
exports.fixDriveLetterAndSlashes = fixDriveLetterAndSlashes;
function fixDriveLetter(aPath, uppercaseDriveLetter = false) {
    if (!aPath)
        return aPath;
    if (aPath.match(/file:\/\/\/[A-Za-z]:/)) {
        const prefixLen = "file:///".length;
        aPath =
            "file:///" +
                aPath[prefixLen].toLowerCase() +
                aPath.substr(prefixLen + 1);
    }
    else if (aPath.match(/^[A-Za-z]:/)) {
        const driveLetter = uppercaseDriveLetter
            ? aPath[0].toUpperCase()
            : aPath[0].toLowerCase();
        aPath = driveLetter + aPath.substr(1);
    }
    return aPath;
}
exports.fixDriveLetter = fixDriveLetter;
function stripTrailingSlash(aPath) {
    return aPath.replace(/\/$/, "").replace(/\\$/, "");
}
exports.stripTrailingSlash = stripTrailingSlash;
//# sourceMappingURL=normalize.js.map