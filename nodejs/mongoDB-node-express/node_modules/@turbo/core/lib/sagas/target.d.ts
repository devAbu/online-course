import { Target, TargetConnection, Action } from "../index";
import { EventChannel, END, Channel, Task } from "redux-saga";
import { TargetSagaAction } from "./shared";
import { State } from "../state";
export declare function spawnConnection(host: string, port: number, connectionChannel: Channel<TargetConnection | -1>): Generator<import("redux-saga/effects").SelectEffect | import("redux-saga/effects").CallEffect<void> | import("redux-saga/effects").CallEffect<TargetConnection> | import("redux-saga/effects").CallEffect<EventChannel<Action>> | import("redux-saga/effects").ForkEffect<void> | import("redux-saga/effects").ChannelPutEffect<-1 | TargetConnection> | import("redux-saga/effects").PutEffect<{
    type: string;
}>, void, State & TargetConnection & EventChannel<Action>>;
export declare function watchTarget(channel: EventChannel<TargetSagaAction | END>, connectionChannel: Channel<TargetConnection | -1>): Generator<import("redux-saga/effects").PutEffect<Action> | import("redux-saga/effects").ForkEffect<void> | import("redux-saga/effects").ChannelPutEffect<-1 | TargetConnection> | import("redux-saga/effects").ChannelTakeEffect<TargetSagaAction>, void, (import("./shared").TargetStartedSagaAction & Task) | (import("./shared").TargetStoppedSagaAction & Task)>;
export declare function targetFlow(target: Target, connectionChannel: Channel<TargetConnection | -1>): Generator<import("redux-saga/effects").ForkEffect<void>, void, unknown>;
