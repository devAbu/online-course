import { Emitter } from "./emitter";
export declare const LOGO: string;
declare const __sessionIdTag: unique symbol;
export declare type SessionId = string & {
    readonly __tag: typeof __sessionIdTag;
};
export interface Environment {
    readonly nodePath: string;
    readonly scriptPath: string;
    readonly getVar: (name: string) => string | undefined;
    readonly execSync: (command: string) => string;
    readonly getTmpFolder: (context: string) => string;
    readonly getTmpFile: (context: string, name: string) => string;
    readonly getAllSessionIds: () => SessionId[];
    readonly cleanPath: (path: string) => string;
    readonly require: (path: string) => any;
    readonly readFile: (path: string) => string;
    readonly exit: () => void;
}
export interface Layout {
    readonly windows: Window[];
}
export interface Window {
    readonly name: string;
    readonly panes: Pane[];
}
interface ComponentPane {
    readonly type: "component";
    readonly component: string;
}
interface ExecPane {
    readonly type: "exec";
    readonly command: string;
}
interface ShellPane {
    readonly type: "shell";
}
export declare type Pane = ComponentPane | ExecPane | ShellPane;
interface Options {
    [key: string]: any;
}
declare type TargetConfig = string | [string, Options];
declare type ShellConfig = string | [string, Options];
export interface Config {
    target: TargetConfig;
    shell: ShellConfig;
    layout?: Layout;
}
export declare type ShellFactory = (options: Options, turbo: Turbo) => Shell;
export interface Shell {
    start(id: SessionId, layout: Layout, turbo: Turbo): void;
    getSessionId(): SessionId | undefined;
}
export interface StartedEvent {
    interface: {
        host: string;
        port: number;
    };
}
export interface TargetEvents {
    started: StartedEvent;
    stopped: undefined;
    stdout: string;
    stderr: string;
}
export interface Target extends Emitter<TargetEvents> {
    readonly isRunning: boolean;
    readonly start: () => void;
    readonly stop: () => void;
}
export declare type Connector = (options: Options, turbo: Turbo) => Target;
export interface TurboOptions {
    sessionId?: SessionId;
}
export interface Turbo {
    env: Environment;
    config: Config;
    options: TurboOptions;
}
export declare function uuid(): string;
export declare function getCurrentSessionId(turbo: Turbo): SessionId | undefined;
export declare const DEFAULT_SESSION_ID: SessionId;
export declare function generateSessionId(turbo: Turbo): SessionId;
export declare function resolvePlugin<T>(turbo: Turbo, type: string, name: string): T;
export declare function createTarget(turbo: Turbo): Target;
export declare function createShell(turbo: Turbo): Shell;
export { Emitter, EmitterBase } from "./emitter";
export { Logger, LevelLogger, logger, format, LogEvent, LogLevel, } from "./logger";
export { State, TargetConnection, TargetConnectionEvents, CallFrame, SourceLocation, Script, RemoteObject, RemoteObjectProperty, RemoteException, Breakpoint, RawBreakpointMetadata, BreakLocation, PausedEvent, ScriptParsedEvent, BreakpointResolvedEvent, BreakpointsEnabledUpdatedEvent, CallFrameId, ScriptId, ObjectId, BreakpointId, RawBreakpointId, EvalResponse, GetPropertiesResponse, Action, ActionType, } from "./state";
export { canonicalizeUrl } from "./normalize";
export { makeStore, Store } from "./reducer";
export * from "./net";
